"""
Logic for cleaning and processing zipcode data
"""
import pandas as pd
import string
import zipcodes

# Mapping of zipcode to Municipality for all zipcodes that are uniquely associated with one municipality, calculated in `zipcode_muni_mapping.ipynb`
ZIP_MUNI_MAP = {
    '01001': 'Agawam',
    '01003': 'Amherst',
    '01004': 'Amherst',
    '01005': 'Barre',
    '01007': 'Belchertown',
    '01008': 'Blandford',
    '01009': 'Palmer',
    '01010': 'Brimfield',
    '01011': 'Chester',
    '01012': 'Chesterfield',
    '01013': 'Chicopee',
    '01014': 'Chicopee',
    '01020': 'Chicopee',
    '01021': 'Chicopee',
    '01022': 'Chicopee',
    '01026': 'Cummington',
    '01028': 'East Longmeadow',
    '01029': 'Otis',
    '01030': 'Agawam',
    '01031': 'Hardwick',
    '01032': 'Goshen',
    '01033': 'Granby',
    '01034': 'Granville',
    '01035': 'Hadley',
    '01036': 'Hampden',
    '01037': 'Hardwick',
    '01038': 'Hatfield',
    '01039': 'Williamsburg',
    '01040': 'Holyoke',
    '01041': 'Holyoke',
    '01050': 'Huntington',
    '01053': 'Northampton',
    '01054': 'Leverett',
    '01056': 'Ludlow',
    '01057': 'Monson',
    '01059': 'Amherst',
    '01060': 'Northampton',
    '01061': 'Northampton',
    '01062': 'Northampton',
    '01063': 'Northampton',
    '01066': 'Hatfield',
    '01068': 'Oakham',
    '01069': 'Palmer',
    '01070': 'Plainfield',
    '01071': 'Russell',
    '01072': 'Shutesbury',
    '01073': 'Southampton',
    '01074': 'Barre',
    '01075': 'South Hadley',
    '01077': 'Southwick',
    '01079': 'Palmer',
    '01080': 'Palmer',
    '01081': 'Wales',
    '01082': 'Ware',
    '01083': 'Warren',
    '01084': 'Chesterfield',
    '01086': 'Westfield',
    '01088': 'Hatfield',
    '01089': 'West Springfield',
    '01090': 'West Springfield',
    '01092': 'Warren',
    '01093': 'Whately',
    '01094': 'Hardwick',
    '01095': 'Wilbraham',
    '01096': 'Williamsburg',
    '01097': 'Russell',
    '01098': 'Worthington',
    '01101': 'Springfield',
    '01102': 'Springfield',
    '01103': 'Springfield',
    '01104': 'Springfield',
    '01105': 'Springfield',
    '01106': 'Longmeadow',
    '01107': 'Springfield',
    '01108': 'Springfield',
    '01109': 'Springfield',
    '01111': 'Springfield',
    '01115': 'Springfield',
    '01116': 'Longmeadow',
    '01118': 'Springfield',
    '01119': 'Springfield',
    '01128': 'Springfield',
    '01129': 'Springfield',
    '01133': 'Springfield',
    '01138': 'Springfield',
    '01139': 'Springfield',
    '01144': 'Springfield',
    '01151': 'Springfield',
    '01152': 'Springfield',
    '01195': 'Springfield',
    '01199': 'Springfield',
    '01201': 'Pittsfield',
    '01202': 'Pittsfield',
    '01203': 'Pittsfield',
    '01220': 'Adams',
    '01222': 'Sheffield',
    '01224': 'Lanesborough',
    '01225': 'Cheshire',
    '01227': 'Dalton',
    '01229': 'Stockbridge',
    '01230': 'Great Barrington',
    '01235': 'Hinsdale',
    '01236': 'West Stockbridge',
    '01238': 'Lee',
    '01240': 'Lenox',
    '01242': 'Lenox',
    '01243': 'Middlefield',
    '01244': 'New Marlborough',
    '01245': 'Monterey',
    '01252': 'Egremont',
    '01253': 'Otis',
    '01254': 'Richmond',
    '01255': 'Sandisfield',
    '01256': 'Savoy',
    '01257': 'Sheffield',
    '01259': 'New Marlborough',
    '01260': 'Lee',
    '01262': 'Stockbridge',
    '01263': 'Stockbridge',
    '01264': 'Tyringham',
    '01266': 'West Stockbridge',
    '01267': 'Williamstown',
    '01270': 'Windsor',
    '01301': 'Greenfield',
    '01302': 'Greenfield',
    '01330': 'Ashfield',
    '01338': 'Buckland',
    '01340': 'Colrain',
    '01341': 'Conway',
    '01342': 'Deerfield',
    '01343': 'Florida',
    '01344': 'Erving',
    '01346': 'Heath',
    '01347': 'Montague',
    '01349': 'Montague',
    '01350': 'Monroe',
    '01351': 'Montague',
    '01354': 'Gill',
    '01355': 'New Salem',
    '01360': 'Northfield',
    '01364': 'Orange',
    '01366': 'Petersham',
    '01367': 'Rowe',
    '01368': 'Royalston',
    '01370': 'Shelburne',
    '01373': 'Deerfield',
    '01375': 'Sunderland',
    '01376': 'Montague',
    '01378': 'Warwick',
    '01379': 'Wendell',
    '01380': 'Wendell',
    '01420': 'Fitchburg',
    '01430': 'Ashburnham',
    '01431': 'Ashby',
    '01432': 'Ayer',
    '01434': 'Ayer',
    '01436': 'Templeton',
    '01438': 'Templeton',
    '01440': 'Gardner',
    '01441': 'Westminster',
    '01450': 'Groton',
    '01451': 'Harvard',
    '01452': 'Hubbardston',
    '01453': 'Leominster',
    '01460': 'Littleton',
    '01462': 'Lunenburg',
    '01463': 'Pepperell',
    '01464': 'Shirley',
    '01467': 'Harvard',
    '01468': 'Templeton',
    '01469': 'Townsend',
    '01470': 'Groton',
    '01471': 'Groton',
    '01472': 'Groton',
    '01473': 'Westminster',
    '01474': 'Townsend',
    '01475': 'Winchendon',
    '01477': 'Winchendon',
    '01501': 'Auburn',
    '01503': 'Berlin',
    '01504': 'Blackstone',
    '01505': 'Boylston',
    '01506': 'Brookfield',
    '01507': 'Charlton',
    '01508': 'Charlton',
    '01509': 'Charlton',
    '01510': 'Clinton',
    '01515': 'East Brookfield',
    '01516': 'Douglas',
    '01517': 'Princeton',
    '01518': 'Sturbridge',
    '01519': 'Grafton',
    '01520': 'Holden',
    '01521': 'Holland',
    '01522': 'Holden',
    '01523': 'Lancaster',
    '01524': 'Leicester',
    '01525': 'Northbridge',
    '01526': 'Sutton',
    '01527': 'Millbury',
    '01529': 'Millville',
    '01531': 'New Braintree',
    '01532': 'Northborough',
    '01534': 'Northbridge',
    '01535': 'North Brookfield',
    '01536': 'Grafton',
    '01537': 'Oxford',
    '01538': 'Uxbridge',
    '01540': 'Oxford',
    '01541': 'Princeton',
    '01542': 'Leicester',
    '01543': 'Rutland',
    '01545': 'Shrewsbury',
    '01546': 'Shrewsbury',
    '01550': 'Southbridge',
    '01560': 'Grafton',
    '01561': 'Lancaster',
    '01562': 'Spencer',
    '01564': 'Sterling',
    '01566': 'Sturbridge',
    '01568': 'Upton',
    '01569': 'Uxbridge',
    '01570': 'Webster',
    '01571': 'Dudley',
    '01580': 'Westborough',
    '01581': 'Westborough',
    '01582': 'Westborough',
    '01583': 'West Boylston',
    '01585': 'West Brookfield',
    '01586': 'Millbury',
    '01588': 'Mansfield',
    '01590': 'Sutton',
    '01601': 'Worcester',
    '01602': 'Worcester',
    '01603': 'Worcester',
    '01604': 'Worcester',
    '01605': 'Worcester',
    '01606': 'Worcester',
    '01607': 'Worcester',
    '01608': 'Worcester',
    '01609': 'Worcester',
    '01610': 'Worcester',
    '01611': 'Leicester',
    '01612': 'Paxton',
    '01613': 'Worcester',
    '01614': 'Worcester',
    '01615': 'Worcester',
    '01653': 'Worcester',
    '01654': 'Worcester',
    '01655': 'Worcester',
    '01701': 'Framingham',
    '01702': 'Framingham',
    '01703': 'Framingham',
    '01704': 'Framingham',
    '01705': 'Framingham',
    '01718': 'Acton',
    '01719': 'Boxborough',
    '01720': 'Acton',
    '01721': 'Ashland',
    '01730': 'Bedford',
    '01731': 'Bedford',
    '01740': 'Bolton',
    '01741': 'Carlisle',
    '01742': 'Concord',
    '01745': 'Southborough',
    '01746': 'Holliston',
    '01747': 'Hopedale',
    '01748': 'Hopkinton',
    '01749': 'Hudson',
    '01752': 'Marlborough',
    '01754': 'Maynard',
    '01756': 'Mendon',
    '01757': 'Milford',
    '01760': 'Natick',
    '01770': 'Sherborn',
    '01772': 'Southborough',
    '01773': 'Lincoln',
    '01775': 'Stow',
    '01776': 'Sudbury',
    '01778': 'Wayland',
    '01784': 'Hopkinton',
    '01801': 'Woburn',
    '01803': 'Burlington',
    '01805': 'Burlington',
    '01806': 'Woburn',
    '01807': 'Woburn',
    '01808': 'Woburn',
    '01810': 'Andover',
    '01812': 'Andover',
    '01813': 'Woburn',
    '01815': 'Woburn',
    '01821': 'Billerica',
    '01822': 'Billerica',
    '01824': 'Chelmsford',
    '01826': 'Dracut',
    '01827': 'Dunstable',
    '01830': 'Haverhill',
    '01831': 'Haverhill',
    '01832': 'Haverhill',
    '01833': 'Georgetown',
    '01834': 'Groveland',
    '01835': 'Haverhill',
    '01840': 'Lawrence',
    '01841': 'Lawrence',
    '01842': 'Lawrence',
    '01843': 'Lawrence',
    '01844': 'Methuen',
    '01845': 'North Andover',
    '01850': 'Lowell',
    '01851': 'Lowell',
    '01852': 'Lowell',
    '01853': 'Lowell',
    '01854': 'Lowell',
    '01860': 'Merrimac',
    '01862': 'Billerica',
    '01863': 'Chelmsford',
    '01864': 'North Reading',
    '01865': 'Billerica',
    '01866': 'Billerica',
    '01867': 'Reading',
    '01876': 'Tewksbury',
    '01879': 'Tyngsborough',
    '01880': 'Wakefield',
    '01885': 'Boxford',
    '01886': 'Westford',
    '01887': 'Wilmington',
    '01888': 'Woburn',
    '01889': 'North Reading',
    '01890': 'Winchester',
    '01899': 'Andover',
    '01901': 'Lynn',
    '01902': 'Lynn',
    '01903': 'Lynn',
    '01904': 'Lynn',
    '01905': 'Lynn',
    '01906': 'Saugus',
    '01907': 'Swampscott',
    '01908': 'Nahant',
    '01910': 'Lynn',
    '01913': 'Amesbury',
    '01915': 'Beverly',
    '01921': 'Boxford',
    '01922': 'Newbury',
    '01923': 'Danvers',
    '01929': 'Essex',
    '01930': 'Gloucester',
    '01931': 'Gloucester',
    '01936': 'Hamilton',
    '01937': 'Hathorne',
    '01938': 'Ipswich',
    '01940': 'Lynnfield',
    '01944': 'Manchester-by-the-Sea',
    '01945': 'Marblehead',
    '01949': 'Middleton',
    '01950': 'Newburyport',
    '01951': 'Newbury',
    '01952': 'Salisbury',
    '01960': 'Peabody',
    '01961': 'Peabody',
    '01965': 'Beverly',
    '01966': 'Rockport',
    '01969': 'Rowley',
    '01970': 'Salem',
    '01971': 'Salem',
    '01982': 'Hamilton',
    '01983': 'Topsfield',
    '01984': 'Wenham',
    '01985': 'West Newbury',
    '02018': 'Norwell',
    '02019': 'Bellingham',
    '02020': 'Nantucket',
    '02021': 'Canton',
    '02025': 'Cohasset',
    '02026': 'Dedham',
    '02027': 'Dedham',
    '02030': 'Dover',
    '02031': 'Mansfield',
    '02032': 'Walpole',
    '02035': 'Foxborough',
    '02038': 'Franklin',
    '02040': 'Scituate',
    '02041': 'Duxbury',
    '02043': 'Hingham',
    '02044': 'Hingham',
    '02045': 'Hull',
    '02047': 'Scituate',
    '02048': 'Mansfield',
    '02050': 'Marshfield',
    '02051': 'Marshfield',
    '02052': 'Medfield',
    '02053': 'Medway',
    '02054': 'Millis',
    '02055': 'Scituate',
    '02056': 'Norfolk',
    '02059': 'Marshfield',
    '02060': 'Scituate',
    '02061': 'Norwell',
    '02062': 'Norwood',
    '02065': 'Marshfield',
    '02066': 'Scituate',
    '02067': 'Sharon',
    '02070': 'Wrentham',
    '02071': 'Walpole',
    '02072': 'Stoughton',
    '02081': 'Walpole',
    '02090': 'Westwood',
    '02093': 'Wrentham',
    '02108': 'Boston',
    '02109': 'Boston',
    '02110': 'Boston',
    '02111': 'Boston',
    '02112': 'Boston',
    '02113': 'Boston',
    '02114': 'Boston',
    '02115': 'Boston',
    '02116': 'Boston',
    '02117': 'Boston',
    '02118': 'Boston',
    '02119': 'Boston',
    '02120': 'Boston',
    '02121': 'Boston',
    '02122': 'Boston',
    '02123': 'Boston',
    '02124': 'Boston',
    '02125': 'Boston',
    '02126': 'Boston',
    '02127': 'Boston',
    '02128': 'Boston',
    '02129': 'Boston',
    '02130': 'Boston',
    '02131': 'Boston',
    '02132': 'Boston',
    '02133': 'Boston',
    '02134': 'Boston',
    '02135': 'Boston',
    '02136': 'Boston',
    '02137': 'Boston',
    '02138': 'Cambridge',
    '02139': 'Cambridge',
    '02140': 'Cambridge',
    '02141': 'Cambridge',
    '02142': 'Cambridge',
    '02143': 'Somerville',
    '02144': 'Somerville',
    '02145': 'Somerville',
    '02148': 'Malden',
    '02149': 'Everett',
    '02150': 'Chelsea',
    '02151': 'Revere',
    '02152': 'Winthrop',
    '02153': 'Medford',
    '02155': 'Medford',
    '02156': 'Medford',
    '02163': 'Boston',
    '02169': 'Quincy',
    '02170': 'Quincy',
    '02171': 'Quincy',
    '02176': 'Melrose',
    '02180': 'Stoneham',
    '02184': 'Braintree',
    '02185': 'Braintree',
    '02186': 'Milton',
    '02187': 'Milton',
    '02188': 'Weymouth',
    '02189': 'Weymouth',
    '02190': 'Weymouth',
    '02191': 'Weymouth',
    '02196': 'Boston',
    '02199': 'Boston',
    '02201': 'Boston',
    '02203': 'Boston',
    '02204': 'Boston',
    '02205': 'Boston',
    '02206': 'Boston',
    '02207': 'Boston',
    '02210': 'Boston',
    '02211': 'Boston',
    '02212': 'Boston',
    '02215': 'Boston',
    '02216': 'Boston',
    '02217': 'Boston',
    '02222': 'Boston',
    '02228': 'Boston',
    '02238': 'Cambridge',
    '02239': 'Cambridge',
    '02241': 'Boston',
    '02266': 'Boston',
    '02269': 'Quincy',
    '02283': 'Boston',
    '02284': 'Boston',
    '02293': 'Boston',
    '02295': 'Boston',
    '02297': 'Boston',
    '02298': 'Boston',
    '02301': 'Brockton',
    '02302': 'Brockton',
    '02303': 'Brockton',
    '02304': 'Brockton',
    '02305': 'Brockton',
    '02322': 'Avon',
    '02324': 'Bridgewater',
    '02325': 'Bridgewater',
    '02327': 'Pembroke',
    '02330': 'Carver',
    '02331': 'Duxbury',
    '02332': 'Duxbury',
    '02333': 'East Bridgewater',
    '02334': 'Easton',
    '02337': 'East Bridgewater',
    '02338': 'Halifax',
    '02339': 'Hanover',
    '02340': 'Hanover',
    '02341': 'Hanson',
    '02343': 'Holbrook',
    '02344': 'Middleborough',
    '02345': 'Plymouth',
    '02346': 'Middleborough',
    '02347': 'Lakeville',
    '02348': 'Lakeville',
    '02349': 'Middleborough',
    '02350': 'Hanson',
    '02351': 'Abington',
    '02355': 'Carver',
    '02356': 'Easton',
    '02357': 'Easton',
    '02358': 'Pembroke',
    '02359': 'Pembroke',
    '02360': 'Plymouth',
    '02361': 'Plymouth',
    '02362': 'Plymouth',
    '02364': 'Kingston',
    '02366': 'Carver',
    '02367': 'Plympton',
    '02368': 'Randolph',
    '02370': 'Rockland',
    '02375': 'Easton',
    '02379': 'West Bridgewater',
    '02381': 'Plymouth',
    '02382': 'Whitman',
    '02420': 'Lexington',
    '02421': 'Lexington',
    '02445': 'Brookline',
    '02446': 'Brookline',
    '02447': 'Brookline',
    '02451': 'Waltham',
    '02452': 'Waltham',
    '02453': 'Waltham',
    '02454': 'Waltham',
    '02455': 'Waltham',
    '02456': 'Littleton',
    '02457': 'Wellesley',
    '02458': 'Newton',
    '02459': 'Newton',
    '02460': 'Newton',
    '02461': 'Newton',
    '02462': 'Newton',
    '02464': 'Newton',
    '02465': 'Newton',
    '02466': 'Newton',
    '02467': 'Newton',
    '02468': 'Newton',
    '02471': 'Watertown',
    '02472': 'Watertown',
    '02474': 'Arlington',
    '02475': 'Arlington',
    '02476': 'Arlington',
    '02477': 'Watertown',
    '02478': 'Belmont',
    '02479': 'Belmont',
    '02481': 'Wellesley',
    '02482': 'Wellesley',
    '02492': 'Needham',
    '02493': 'Weston',
    '02494': 'Needham',
    '02495': 'Newton',
    '02532': 'Bourne',
    '02534': 'Bourne',
    '02536': 'Falmouth',
    '02537': 'Sandwich',
    '02538': 'Wareham',
    '02539': 'Edgartown',
    '02540': 'Falmouth',
    '02541': 'Falmouth',
    '02542': 'Bourne',
    '02543': 'Falmouth',
    '02552': 'Chilmark',
    '02553': 'Bourne',
    '02554': 'Nantucket',
    '02556': 'Falmouth',
    '02557': 'Oak Bluffs',
    '02558': 'Wareham',
    '02559': 'Bourne',
    '02561': 'Bourne',
    '02562': 'Bourne',
    '02563': 'Sandwich',
    '02564': 'Nantucket',
    '02565': 'Falmouth',
    '02568': 'Tisbury',
    '02571': 'Wareham',
    '02573': 'Tisbury',
    '02574': 'Falmouth',
    '02575': 'West Tisbury',
    '02576': 'Wareham',
    '02584': 'Nantucket',
    '02601': 'Barnstable',
    '02630': 'Barnstable',
    '02631': 'Brewster',
    '02632': 'Barnstable',
    '02633': 'Chatham',
    '02634': 'Barnstable',
    '02635': 'Barnstable',
    '02636': 'Barnstable',
    '02637': 'Barnstable',
    '02638': 'Dennis',
    '02639': 'Dennis',
    '02641': 'Dennis',
    '02642': 'Eastham',
    '02643': 'Orleans',
    '02644': 'Sandwich',
    '02645': 'Harwich',
    '02646': 'Harwich',
    '02647': 'Barnstable',
    '02648': 'Barnstable',
    '02649': 'Mashpee',
    '02650': 'Chatham',
    '02651': 'Eastham',
    '02652': 'Truro',
    '02653': 'Orleans',
    '02655': 'Barnstable',
    '02657': 'Provincetown',
    '02659': 'Chatham',
    '02660': 'Dennis',
    '02661': 'Harwich',
    '02662': 'Orleans',
    '02663': 'Wellfleet',
    '02664': 'Yarmouth',
    '02666': 'Truro',
    '02667': 'Wellfleet',
    '02668': 'Barnstable',
    '02669': 'Chatham',
    '02670': 'Dennis',
    '02671': 'Harwich',
    '02672': 'Barnstable',
    '02673': 'Yarmouth',
    '02675': 'Yarmouth',
    '02702': 'Freetown',
    '02703': 'Attleboro',
    '02712': 'Norton',
    '02713': 'Gosnold',
    '02714': 'Dartmouth',
    '02715': 'Dighton',
    '02717': 'Freetown',
    '02718': 'Taunton',
    '02719': 'Fairhaven',
    '02720': 'Fall River',
    '02721': 'Fall River',
    '02722': 'Fall River',
    '02723': 'Fall River',
    '02724': 'Fall River',
    '02725': 'Somerset',
    '02726': 'Somerset',
    '02738': 'Marion',
    '02739': 'Mattapoisett',
    '02740': 'New Bedford',
    '02741': 'New Bedford',
    '02742': 'New Bedford',
    '02743': 'Acushnet',
    '02744': 'New Bedford',
    '02745': 'New Bedford',
    '02746': 'New Bedford',
    '02747': 'Dartmouth',
    '02748': 'Dartmouth',
    '02760': 'North Attleboro',
    '02761': 'North Attleboro',
    '02762': 'Plainville',
    '02763': 'Attleboro',
    '02764': 'Dighton',
    '02766': 'Norton',
    '02767': 'Raynham',
    '02768': 'Raynham',
    '02769': 'Rehoboth',
    '02770': 'Rochester',
    '02771': 'Seekonk',
    '02777': 'Swansea',
    '02779': 'Berkley',
    '02780': 'Taunton',
    '02783': 'Taunton',
    '02790': 'Westport',
    '02791': 'Westport',
    '05501': 'Andover',
    '05544': 'Andover'
 }

# Mappings of city name to Municipality name ONLY for cities that contain zipcodes that map to multiple municipalities.
# Used to disambiguate multi-muni zipcodes when City field is present.
CITY_MUNI_MAP = {
    'amherst': 'Amherst',
    'easthampton': 'Easthampton',
    'westfield': 'Westfield',
    'becket': 'Becket',
    'dalton': 'Dalton',
    'lanesboro': 'Lanesborough',
    'north adams': 'North Adams',
    'south egremont': 'Egremont',
    'athol': 'Athol',
    'bernardston': 'Bernardston',
    'charlemont': 'Charlemont',
    'chilmark': 'Chilmark',
    'alford': 'Alford',
    'aquinnah': 'Aquinnah',
    'clarksburg': 'Clarksburg',
    'hancock': 'Hancock',
    'hawley': 'Hawley',
    'leyden': 'Leyden',
    'montgomery': 'Montgomery',
    'mount washington': 'Mount Washington',
    'new ashford': 'New Ashford',
    'pelham': 'Pelham',
    'phillipston': 'Phillipston',
    'washington': 'Washington',
    'westhampton': 'Westhampton'
 }

def clean(zip_series: pd.Series) -> pd.DataFrame:
    """Standardize zipcode formatting in a pandas series

    Pandas will likely load zipcodes from an excel file as an object series
    mixing string and numeric types.  This function will cast all entries to
    string types, strip whitespace, left pad to a minimum of 5 characters with zeros, then
    validate the entry contains a valid zipcode using a regular expression.

    Return: pandas.DataFrame
    - Pandas series of cleaned zipcodes: str
    - Pandas series of cleaned zip4, or empty string if missing: str
    - Pandas series of valid zipcode indicators: boolean
    """
    # Valid zipcodes are 3-5 numeric digits, followed by an optional dash and 4 more digits, or an optional ".0" if the data has been cast as floats.
    valid_zipcode_regex = r"^([0-9]{3,5})(?:[.]0)?(?:-([0-9]{4})|-)?$"
    #The extract function will match this pattern, and extract the zip5 group into column 0 and the zip4 group into column 1.  NaN if group is not present or pattern isn't matched.
    res = zip_series.astype(str).str.strip().str.extract(valid_zipcode_regex)

    cleaned_zipcode_series = res[0].str.zfill(5).fillna('')
    cleaned_zip4_series = res[1].fillna('')

    valid_zipcode_series = cleaned_zipcode_series.str.match(valid_zipcode_regex)

    #Replace invalid value rows with original inputs
    cleaned_zipcode_series.loc[~valid_zipcode_series] = zip_series[~valid_zipcode_series]
    return pd.DataFrame(data={"zip_cleaned": cleaned_zipcode_series, "zip4_cleaned": cleaned_zip4_series, "zip_valid": valid_zipcode_series})


def validate_zip_town_row(row: dict, town_field: str, zip_field: str) -> pd.Series:
    """
    Use zipcodes library to append town data from zipcodes and validate existing zip/town inputs
    """
    INVALID_RESULT = pd.Series({
        "town": "INVALID",
        "municipality": "INVALID",
        "zip_exists": False,
        "town_valid": False,
    })

    muni = ZIP_MUNI_MAP.get(row[zip_field])
    if not muni:
        #Try looking up town_field in City/Muni map
        standardized_raw_town_name = str(row[town_field]).lower().strip()
        muni = CITY_MUNI_MAP.get(standardized_raw_town_name)
        if not muni:
            return INVALID_RESULT

    # From here on, we were at least able to look up a muni.  But we still want to determine whether the raw town data is valid
    INVALID_RESULT = pd.Series({
            "municipality": muni,
            "town": string.capwords(str(row[town_field]).strip()),
            "zip_exists": False,
            "town_valid": False,
        })
    
    try:
        zip_results = zipcodes.matching(row[zip_field])
    except TypeError:
        return INVALID_RESULT
    except ValueError:
        return INVALID_RESULT

    if len(zip_results) > 1:
        raise ValueError(f"Multimatch zipcode {row[zip_field]} encountered!")
    elif len(zip_results) == 0:
        return INVALID_RESULT
    else: # len(zip_results)==1

        zip_results = zip_results[0]
        standardized_raw_town_name = str(row[town_field]).lower().strip()
        standardized_town_name = zip_results["city"].lower().strip()
        standardized_acceptable_towns = [x.lower().strip() for x in zip_results["acceptable_cities"]]
        standardized_acceptable_towns.append(standardized_town_name)

        #Strict exact matching for now
        town_valid = standardized_raw_town_name in standardized_acceptable_towns
        output = {
            "municipality": muni,
            "town": zip_results["city"],
            "zip_exists": True,
            "town_valid": town_valid
        }
    return pd.Series(output)


def validate_zip_town(df: pd.DataFrame, town_field: str, zip_field: str) -> pd.DataFrame:
    """
    Use zipcodes library to append town data from zipcodes and validate existing zip/town inputs

    Return: pandas.DataFrame
    - Pandas series of town name from zipcodes library: str
    - Pandas series indicating zipcode exists: boolean
    - Pandas series indicating raw data town is valid given zipcode: boolean
    """
    return df.merge(df.apply(
                        lambda row: validate_zip_town_row(row, town_field, zip_field), axis=1
                        ),
                    left_index=True, right_index=True
                )


def valid_town_row(row: dict, town_field: str) -> pd.Series:
    standardized_town = string.capwords(row[town_field].strip())
    zip_list = zipcodes.filter_by(city=standardized_town, state='MA')
    town_valid = (len(zip_list)>0)
    output = {
            "town": standardized_town,
            "zip_exists": False,
            "zip_cleaned": "",
            "zip4_cleaned": "",
            "zip_valid": False,
            "town_valid": town_valid
        }
    return pd.Series(output)


def validate_town(df: pd.DataFrame, town_field: str) -> pd.DataFrame:
    """
    Use zipcodes library to verify town name is valid and append cleaned fields

    Return: pandas.DataFrame
    - Pandas series of standardize (Capitalized) town name from zipcodes library: str
    - Blank columns for zip_cleaned, zip4_cleaned, and zip_valid=False to comply with clean data schema
    - Pandas series indicating raw data town is valid in the sense of existing in the zipcode lookup table.
    """
    return df.merge(df.apply(lambda row: valid_town_row(row, town_field), axis=1), left_index=True, right_index=True)
